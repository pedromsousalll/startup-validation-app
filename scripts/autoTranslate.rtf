{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 const fs = require('fs');\
const axios = require('axios');\
\
// Set up Gemini API credentials (or your preferred translation API)\
const GEMINI_API_URL = 'https://api.gemini.com/translate';  // Adjust if needed\
const GEMINI_API_KEY = 'AIzaSyDUkE9fjVkE9nsrK4euefkE3dUlJ1HeWvk';\
\
// Load the original source file (e.g., Portuguese)\
const sourceFilePath = './src/locales/pt/common.json';  // Change to 'pt' for Portuguese\
\
// Function to fetch translation using the Gemini API\
async function translateTextWithGemini(text, targetLanguage) \{\
  try \{\
    const response = await axios.post(GEMINI_API_URL, \{\
      text: text,\
      target_language: targetLanguage\
    \}, \{\
      headers: \{\
        'Authorization': `Bearer $\{GEMINI_API_KEY\}`,\
      \}\
    \});\
\
    // Adjust based on Gemini's response structure\
    return response.data.translated_text;  // Make sure this matches the API's response format\
  \} catch (error) \{\
    console.error('Error translating text with Gemini API:', error);\
    return text;  // Fallback to original text if translation fails\
  \}\
\}\
\
// Function to translate the entire JSON file\
async function translateJsonFile(filePath, targetLanguages) \{\
  const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));\
  const translations = \{\};\
\
  for (const lang of targetLanguages) \{\
    translations[lang] = \{\};\
    for (const key in content) \{\
      const translatedText = await translateTextWithGemini(content[key], lang);\
      translations[lang][key] = translatedText;\
    \}\
  \}\
\
  return translations;\
\}\
\
// Function to save translations to files\
async function saveTranslations(translations) \{\
  for (const [lang, translationData] of Object.entries(translations)) \{\
    const filePath = `./public/locales/$\{lang\}/common.json`;\
    fs.writeFileSync(filePath, JSON.stringify(translationData, null, 2));\
    console.log(`Translations for $\{lang\} saved at $\{filePath\}`);\
  \}\
\}\
\
// Main function to run the translation process\
async function main() \{\
  const targetLanguages = ['en', 'es', 'fr'];  // List of target languages (English, Spanish, French)\
  const translations = await translateJsonFile(sourceFilePath, targetLanguages);\
  await saveTranslations(translations);\
\}\
\
// Execute the translation\
main();\
\
}