// 1. Carregar variáveis de ambiente do ficheiro .env
// Certifique-se de ter instalado: npm install dotenv
require('dotenv').config();

const fs = require('fs');
const axios = require('axios');

// --- Configuração ---
// !!! IMPORTANTE: Verifique se este URL está correto para a API que você quer usar !!!
const GEMINI_API_URL = 'https://api.gemini.com/translate'; // <-- AJUSTE ESTE URL!

// Lê a chave da API a partir das variáveis de ambiente (carregadas do .env)
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

// Caminho para o ficheiro de origem (Português)
// Verifique se este é o caminho correto no seu projeto
const sourceFilePath = './public/locales/pt/common.json';

// Línguas para as quais traduzir
const targetLanguages = ['en', 'es', 'fr']; // Adicione ou remova línguas conforme necessário

// --- Funções ---

// Função para chamar a API de tradução
async function translateTextWithApi(text, targetLanguage) {
    // Verifica se a chave da API foi carregada
    if (!GEMINI_API_KEY) {
        console.error("Erro: GEMINI_API_KEY não encontrada nas variáveis de ambiente. Verifique o ficheiro .env e se dotenv está a ser carregado.");
        return text; // Retorna o texto original em caso de erro de configuração
    }

    try {
        // Verifique a documentação da API que está a usar para a estrutura correta do pedido e autenticação
        const response = await axios.post(GEMINI_API_URL, {
            // Payload da requisição - pode precisar de ajustes (ex: source_language)
            text: text,
            target_language: targetLanguage
        }, {
            headers: {
                // Método de autorização - pode variar (ex: 'x-api-key': GEMINI_API_KEY)
                'Authorization': `Bearer ${GEMINI_API_KEY}`, // Ajuste se a API usar outro método
                'Content-Type': 'application/json'
            }
        });

        // Ajuste com base na estrutura da resposta da sua API específica
        // Verifique o que a API realmente retorna! Exemplos:
        // return response.data.translations[0].text;
        // return response.data.data.translations[0].translatedText;
        return response.data.translated_text; // <-- VERIFIQUE ESTE CAMPO NA RESPOSTA DA API!

    } catch (error) {
        const errorMsg = error.response?.data || error.message;
        console.error(`Erro ao traduzir "${text.substring(0, 20)}..." para ${targetLanguage}:`, errorMsg);
        // Considerar estratégias de retentativa ou log mais detalhado aqui
        return text; // Retorna o texto original em caso de falha na API
    }
}

// Função para traduzir recursivamente um objeto JSON
async function translateJsonObject(obj, targetLanguage) {
    const translatedObj = {};
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            const value = obj[key];
            if (typeof value === 'string') {
                if (value.trim() === '') {
                    translatedObj[key] = '';
                } else {
                    translatedObj[key] = await translateTextWithApi(value, targetLanguage);
                    // Atraso para evitar limites de taxa (rate limiting) - ajuste conforme necessário
                    await new Promise(resolve => setTimeout(resolve, 100)); // Aumentei ligeiramente para 100ms
                }
            } else if (typeof value === 'object' && value !== null && !Array.isArray(value)) { // Traduz objetos, mas não arrays
                translatedObj[key] = await translateJsonObject(value, targetLanguage);
            } else {
                // Mantém outros tipos (arrays, números, booleanos, null) como estão
                translatedObj[key] = value;
            }
        }
    }
    return translatedObj;
}

// Função principal para processar as traduções
async function processTranslations(sourcePath, targets) {
    let sourceContent;
    try {
        if (!fs.existsSync(sourcePath)) {
             console.error(`Erro: Ficheiro de origem não encontrado em ${sourcePath}`);
             return;
        }
        sourceContent = JSON.parse(fs.readFileSync(sourcePath, 'utf8'));
    } catch (error) {
        console.error(`Erro ao ler ou fazer parse do ficheiro de origem ${sourcePath}:`, error);
        return;
    }

    console.log(`A iniciar tradução de ${sourcePath} para: ${targets.join(', ')}...`);

    for (const lang of targets) {
        console.log(`\n-> Traduzindo para ${lang}...`);
        const translatedData = await translateJsonObject(sourceContent, lang);

        const targetDir = `./public/locales/${lang}`;
        const targetFilePath = `${targetDir}/common.json`;

        try {
            // Cria o diretório de destino se não existir
            fs.mkdirSync(targetDir, { recursive: true });
            // Escreve o ficheiro traduzido
            fs.writeFileSync(targetFilePath, JSON.stringify(translatedData, null, 2), 'utf8');
            console.log(`   Traduções para ${lang} guardadas com sucesso em ${targetFilePath}`);
        } catch (error) {
            console.error(`   Erro ao escrever ficheiro para ${lang} em ${targetFilePath}:`, error);
        }
    }
    console.log('\nProcesso de tradução concluído.');
}

// --- Execução Principal ---

// Verifica se a API Key foi carregada antes de começar
if (!GEMINI_API_KEY) {
    console.error("ERRO CRÍTICO: GEMINI_API_KEY não definida. Verifique o ficheiro .env e se 'require(\"dotenv\").config();' está no topo do script.");
} else {
    // Executa o processo de tradução
    processTranslations(sourceFilePath, targetLanguages);
}
